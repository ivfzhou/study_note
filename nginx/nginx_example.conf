# 全局块
worker_processes 1; # 数值越大，Nginx 并发能力就越强。
error_log /var/log/nginx/error.log warn; # 错误日志存放的位置。notice info
pid /var/nginx/nginx.pid

events {
  worker_connections 1024; # 数值越大，Nginx 并发能力就越强。worker_processes * worker_connections / 4 | 2 = Nginx 最终的并发能力。动态资源需要/4，静态资源需要/2.
}

http {
  include /etc/nginx/mime.types; # 代表引入一个外部的文件，/mime.types 中放着大量的媒体类型。include /etc/nginx/conf.d/*.conf; 引入了 conf.d 目录下的以 .conf 为结尾的配置文件
  default_type application/octet-stream;
  server {
    listen 80; # 代表 Nginx 监听的端口号

    listen 443 ssl; # 使用 ssl
    ssl_certificate /path/to/crt;
    ssl_certificate_key /path/to/key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    server_name localhost; # 代表 Nginx 接收请求的 ip
    location / {
      rewrite /xxx/(.*) /$1 break; # 重写 uri
      root /usr/share/nginx/html; # 将接收到的请求根据 /usr/share/nginx/html 去查找静态资源
      index index.html index.htm; # 默认去上述的路径中找到 index.html 或者 index.htm
      autoindex on; # 代表展示静态资源全的全部内容，以列表的形式展开

      proxy_pass http://192.168.0.2:8080/;
      $uri $query_string $scheme $arg_
      proxy_pass http://server_name/;
      proxy_set_header Host $http_host;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      deny all;
      allow all;
      allow ip;
    }

    upstream server_name {
      ip_hash;
      server ip:port weight=权重比例;
      server ip:port weight=权重比例;
    }

    error_page 500 503 /50x.html; # 出现错误返回的页面
}
